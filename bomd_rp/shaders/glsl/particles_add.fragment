// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

// version 300 code

#include "uniformPerFrameConstants.h"
#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

_centroid in vec2 uv;
in vec4 color;
in vec4 normal;

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code
varying vec2 uv;
varying vec4 color;
varying vec4 normal;

#endif

uniform sampler2D TEXTURE_0;

#define hash(p) ( 2.* fract(sin((p)*mat2(1.71,1.7, 2.5,1.33)) *4.323) - 1.)
#define P(x,y) dot( hash( i + vec2(x,y) ), f - vec2(x,y) )

float noise( vec2 p )
{
    vec2 i = floor( p ),
         f = fract( p ),
	     u = f*f*(3.-2.*f);

    return mix( mix( P(0,0), P(1,0), u.x),
                mix( P(0,1), P(1,1), u.x), u.y);
}

float perlin( vec2 p )
{
    float v  = 0.,s = 2.;
    for( int i=0; i++ < 2; s /= 2., p*=3. )
        v += s* noise( p );
    return v;
}

void main()
{
    vec4 tex = texture2D(TEXTURE_0,uv);

	gl_FragColor = vec4(color.rgb*tex.rgb*color.a*tex.a,0.0);
	//gl_FragColor = tex1;
}